<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.

API-M RETRY LOGIC FOR AZURE OPEN AI SERVICE NOTES - 06/09/2023
Here's a summary of what this policy does:
In the <inbound> section, it generates a random number - the set from which it chooses is based on the available endpoints for the models GPT-4, GPT-4-32k, GPT-35-Turbo, Text-Davinci-003, and text-embeddings-ada-002 -  based on the request ID and stores it in a variable called urlId. It also extracts the "deployment-id" from the request and stores it in a variable called "aoaiModelName".
Based on the value of urlId, it chooses a backend service URL and API key from a set of predefined Azure OpenAI Service API endpoints and keys stored as Named value pairs in API Management Services (API-M).
It sets the backend service base URL and overrides the "api-key" header with the selected API key.
It includes a cache lookup configuration to improve performance by caching responses.
In the <outbound> section, it defines retry policies with different conditions based on the response status code and the value of aoaiModelName. The retry policies handle rate-limiting scenarios by adjusting the backend service URL, API key, and retry interval.
It adds a custom header "Backend-Service-URL" to the response, indicating the backend service used for the request.
It stores the response in cache for 20 seconds to improve performance for subsequent requests.
The <on-error> section inherits the base error handling policy.

The "deployment-id" variable is capturing and evaluating the name of the model as you created it - so if you named it "custom-gpt-35-turbo" instead of "gpt-35-turbo" you will need to edit the policies below. This code assumes all models are deployed as named and that each model is deployed in each region only once.

Overall, this policy block aims to improve the performance, resilience, and load balancing of API requests by distributing them across different backend services and handling rate-limiting situations with a retry mechanism.
-->
<policies>
    <inbound>
        <base />
        <set-variable name="aoaiModelName" value="@(context.Request.MatchedParameters["deployment-id"])" />
        <!-- This block is based on the included .xlsx showing what models are available at what endpoints -->
        <choose>

            <when condition="@(context.Variables.GetValueOrDefault<string>("aoaiModelName") == "text-davinci-003" || context.Variables.GetValueOrDefault<string>("aoaiModelName") == "text-embedding-ada-002")">
                <set-variable name="urlId" value="@(new Random(context.RequestId.GetHashCode()).Next(1, 4))" />
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 1)">
                <set-variable name="backendUrl" value="{{aoai-eastus}}" />
                <set-header name="api-key" exists-action="override">
                    <value>{{aoai-eastus-key}}</value>
                </set-header>
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 2)">
                <set-variable name="backendUrl" value="{{aoai-southcentral}}" />
                <set-header name="api-key" exists-action="override">
                    <value>{{aoai-southcentral-key}}</value>
                </set-header>
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 3)">
                <set-variable name="backendUrl" value="{{aoai-westeurope}}" />
                <set-header name="api-key" exists-action="override">
                    <value>{{aoai-westeurope-key}}</value>
                </set-header>
                <set-backend-service base-url="@((string)context.Variables["backendUrl"])" />
            </when>

            <when condition="@(context.Variables.GetValueOrDefault<string>("aoaiModelName") == "gpt-4" || context.Variables.GetValueOrDefault<string>("aoaiModelName") == "gpt-4-32k")">
                <set-variable name="urlId" value="@(new Random(context.RequestId.GetHashCode()).Next(1, 3))" />
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 1)">
                <set-variable name="backendUrl" value="{{aoai-eastus}}" />
                <set-header name="api-key" exists-action="override">
                    <value>{{aoai-eastus-key}}</value>
                </set-header>
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 2)">
                <set-variable name="backendUrl" value="{{aoai-francecentral}}" />
                <set-header name="api-key" exists-action="override">
                    <value>{{aoai-francecentral-key}}</value>
                </set-header>
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<string>("aoaiModelName") == "gpt-35-turbo")">
                <set-variable name="urlId" value="@(new Random(context.RequestId.GetHashCode()).Next(1, 6))" />
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 1)">
                <set-variable name="backendUrl" value="{{aoai-eastus}}" />
                <set-header name="api-key" exists-action="override">
                    <value>{{aoai-eastus-key}}</value>
                </set-header>
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 2)">
                <set-variable name="backendUrl" value="{{aoai-francecentral}}" />
                <set-header name="api-key" exists-action="override">
                    <value>{{aoai-francecentral-key}}</value>
                </set-header>
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 3)">
                <set-variable name="backendUrl" value="{{aoai-southcentral}}" />
                <set-header name="api-key" exists-action="override">
                    <value>{{aoai-southcentral-key}}</value>
                </set-header>
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 4)">
                <set-variable name="backendUrl" value="{{aoai-westeurope}}" />
                <set-header name="api-key" exists-action="override">
                    <value>{{aoai-westeurope-key}}</value>
                </set-header>
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 5)">
                <set-variable name="backendUrl" value="{{aoai-uksouth}}" />
                <set-header name="api-key" exists-action="override">
                    <value>{{aoai-uksouth-key}}</value>
                </set-header>
                <set-backend-service base-url="@((string)context.Variables["backendUrl"])" />
            </when>

            <!-- This block is for sending any traffic with no pre-defined limit or not currently launched a home in US East to try and service the request -->
            <when condition="@(context.Variables.GetValueOrDefault<string>("aoaiModelName") != "gpt-4" || context.Variables.GetValueOrDefault<string>("aoaiModelName") != "gpt-4-32k" || context.Variables.GetValueOrDefault<string>("aoaiModelName") != "text-davinci-003" || context.Variables.GetValueOrDefault<string>("aoaiModelName") != "text-embedding-ada-002" || context.Variables.GetValueOrDefault<string>("aoaiModelName") != "gpt-35-turbo")">
                <set-variable name="urlId" value="@(new Random(context.RequestId.GetHashCode()).Next(1, 2))" />
            </when>
            <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 1)">
                <set-variable name="backendUrl" value="{{aoai-eastus}}" />
                <set-header name="api-key" exists-action="override">
                    <value>{{aoai-eastus-key}}</value>
                </set-header>
            </when>
            <otherwise>
                <!-- Should never happen, but you never know ;) -->
                <return-response>
                    <set-status code="500" reason="PolicyBlock1InternalServerError" />
                    <set-header name="Microsoft-Azure-Api-Management-Correlation-Id" exists-action="override">
                        <value>@{return Guid.NewGuid().ToString();}</value>
                    </set-header>
                    <set-body>Ian did a bad during his attempt to set stuff up and a gateway-related error occurred while processing the request.</set-body>
                </return-response>
            </otherwise>
        </choose>
        <set-backend-service base-url="@((string)context.Variables["backendUrl"])" />
        <cache-lookup vary-by-developer="false" vary-by-developer-groups="false" downstream-caching-type="none">
            <vary-by-header>Accept</vary-by-header>
            <vary-by-header>Accept-Charset</vary-by-header>
            <vary-by-header>Authorization</vary-by-header>
        </cache-lookup>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <!-- 
The retry policy in the provided XML is used to automatically retry the request to the backend service under certain conditions. 
In this specific case, the policy is set to retry the request when the following conditions are met:
The response status code is 429 (Too Many Requests): 
This usually indicates that the client has sent too many requests in a given amount of time, and the server is rate-limiting the requests.

count: This attribute specifies the maximum number of retries that the policy will attempt if the specified condition is met. 
For example, if count="5", the policy will retry up to 5 times.

interval: This attribute specifies the time interval (in seconds) between each retry attempt. 
If interval="1", there will be a 1-second delay between retries.

first-fast-retry: This attribute, when set to true, allows the first retry attempt to happen immediately, without waiting for 
the specified interval. If set to false, all retry attempts will wait for the interval duration before being executed.

When the retry policy is triggered, it will execute the logic inside the <choose> block to modify the backend service URL and API key based 
on the value of the urlId variable. This effectively changes the backend service to which the request will be retried, 
in case the initial backend service returns a 429 status code.

This will likely get improved / updated but hey, it works. May the 4th be with you.

The Backend Service, governed by the "backendUrl", is incremented by 1 with each retry. There are different retry blocks for each model as each model has different Token Per Minute (TPM) rates and number of regions that serve that model. Therefore, to allow for different retry rates, the models enter different retry blocks.

PLEASE NOTE THAT WHEN YOU CHANGE THE NUMBER OF ENDPOINTS BEING USED FROM 6 !!!
You  need to edit line 29 to choose a random number with 1 inclusive, top-level exclusive i.e. Next(1, 7) chooses 1, 2, 3, 4, 5, or 6. So if you want to use 9 endpoints that would be Next(1, 10) etc.
You must then also adjust each point where the ("urlId") % 6 + 1) logic is used e.g. if we have 9 endpoints that would be ("urlId") % 9 + 1). You will get 500 errors otherwise as it will try to set a new urldId variable to a potentially non-existent endpoint number or fail to use all available endpoints.

-->
        <retry condition="@(context.Response.StatusCode == 429 && (context.Variables.GetValueOrDefault<string>("aoaiModelName") == "text-davinci-003"))" count="30" interval="4" delta="2" max-interval="20" first-fast-retry="true">
            <set-variable name="urlId" value="@(context.Variables.GetValueOrDefault<int>("urlId") % 3 + 1)" />
            <choose>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 1)">
                    <set-backend-service base-url="{{aoai-eastus}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-eastus-key}}</value>
                    </set-header>
                </when>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 2)">
                    <set-backend-service base-url="{{aoai-southcentral}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-southcentral-key}}</value>
                    </set-header>
                </when>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 3)">
                    <set-backend-service base-url="{{aoai-westeurope}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-eastus-key}}</value>
                    </set-header>
                </when>
                <otherwise>
                    <!-- Should never happen, but you never know ;) -->
                    <return-response>
                        <set-status code="500" reason="InternalServerError-text-davinci-003" />
                        <set-header name="Microsoft-Azure-Api-Management-Correlation-Id" exists-action="override">
                            <value>@{return Guid.NewGuid().ToString();}</value>
                        </set-header>
                        <set-body>A Text-Davinci-003 gateway-related error occurred while processing the request.</set-body>
                    </return-response>
                </otherwise>
            </choose>
        </retry>
        <retry condition="@(context.Response.StatusCode == 429 && (context.Variables.GetValueOrDefault<string>("aoaiModelName") == "text-embedding-ada-002"))" count="30" interval="4" delta="2" max-interval="20" first-fast-retry="true">
            <set-variable name="urlId" value="@(context.Variables.GetValueOrDefault<int>("urlId") % 3 + 1)" />
            <choose>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 1)">
                    <set-backend-service base-url="{{aoai-eastus}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-eastus-key}}</value>
                    </set-header>
                </when>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 2)">
                    <set-backend-service base-url="{{aoai-southcentral}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-southcentral-key}}</value>
                    </set-header>
                </when>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 3)">
                    <set-backend-service base-url="{{aoai-westeurope}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-eastus-key}}</value>
                    </set-header>
                </when>
                <otherwise>
                    <!-- Should never happen, but you never know ;) -->
                    <return-response>
                        <set-status code="500" reason="InternalServerError-text-embedding-ada-002" />
                        <set-header name="Microsoft-Azure-Api-Management-Correlation-Id" exists-action="override">
                            <value>@{return Guid.NewGuid().ToString();}</value>
                        </set-header>
                        <set-body>A Text-Embedding-Ada-002 gateway-related error occurred while processing the request.</set-body>
                    </return-response>
                </otherwise>
            </choose>
        </retry>
        <retry condition="@(context.Response.StatusCode == 429 && (context.Variables.GetValueOrDefault<string>("aoaiModelName") == "gpt-4"))" count="8" interval="20" delta="10" first-fast-retry="true">
            <set-variable name="urlId" value="@(context.Variables.GetValueOrDefault<int>("urlId") % 2 + 1)" />
            <choose>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 1)">
                    <set-variable name="backendUrl" value="{{aoai-eastus}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-eastus-key}}</value>
                    </set-header>
                </when>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 2)">
                    <set-variable name="backendUrl" value="{{aoai-francecentral}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-francecentral-key}}</value>
                    </set-header>
                </when>
                <otherwise>
                    <!-- Should never happen, but you never know ;) -->
                    <return-response>
                        <set-status code="500" reason="InternalServerError-gpt-4" />
                        <set-header name="Microsoft-Azure-Api-Management-Correlation-Id" exists-action="override">
                            <value>@{return Guid.NewGuid().ToString();}</value>
                        </set-header>
                        <set-body>A GPT-4 gateway-related error occurred while processing the request.</set-body>
                    </return-response>
                </otherwise>
            </choose>
        </retry>
        <retry condition="@(context.Response.StatusCode == 429 && (context.Variables.GetValueOrDefault<string>("aoaiModelName") == "gpt-4-32k"))" count="8" interval="20" delta="10" first-fast-retry="true">
            <set-variable name="urlId" value="@(context.Variables.GetValueOrDefault<int>("urlId") % 2 + 1)" />
            <choose>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 1)">
                    <set-variable name="backendUrl" value="{{aoai-eastus}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-eastus-key}}</value>
                    </set-header>
                </when>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 2)">
                    <set-variable name="backendUrl" value="{{aoai-francecentral}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-francecentral-key}}</value>
                    </set-header>
                </when>
                <otherwise>
                    <!-- Should never happen, but you never know ;) -->
                    <return-response>
                        <set-status code="500" reason="InternalServerError-gpt-4-32k" />
                        <set-header name="Microsoft-Azure-Api-Management-Correlation-Id" exists-action="override">
                            <value>@{return Guid.NewGuid().ToString();}</value>
                        </set-header>
                        <set-body>A GPT-4-32k gateway-related error occurred while processing the request.</set-body>
                    </return-response>
                </otherwise>
            </choose>
        </retry>
        <retry condition="@(context.Response.StatusCode == 429 && (context.Variables.GetValueOrDefault<string>("aoaiModelName") == "gpt-35-turbo"))" count="8" interval="20" delta="10" first-fast-retry="true">
            <set-variable name="urlId" value="@(context.Variables.GetValueOrDefault<int>("urlId") % 5 + 1)" />
            <choose>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 1)">
                    <set-variable name="backendUrl" value="{{aoai-eastus}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-eastus-key}}</value>
                    </set-header>
                </when>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 2)">
                    <set-variable name="backendUrl" value="{{aoai-francecentral}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-francecentral-key}}</value>
                    </set-header>
                </when>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 3)">
                    <set-variable name="backendUrl" value="{{aoai-southcentral}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-southcentral-key}}</value>
                    </set-header>
                </when>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 4)">
                    <set-variable name="backendUrl" value="{{aoai-westeurope}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-westeurope-key}}</value>
                    </set-header>
                </when>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 5)">
                    <set-variable name="backendUrl" value="{{aoai-uksouth}}" />
                    <set-header name="api-key" exists-action="override">
                        <value>{{aoai-uksouth-key}}</value>
                    </set-header>
                </when>
                <otherwise>
                    <!-- Should never happen, but you never know ;) -->
                    <return-response>
                        <set-status code="500" reason="InternalServerError-gpt-35-turbo" />
                        <set-header name="Microsoft-Azure-Api-Management-Correlation-Id" exists-action="override">
                            <value>@{return Guid.NewGuid().ToString();}</value>
                        </set-header>
                        <set-body>A GPT-35-Turbo gateway-related error occurred while processing the request.</set-body>
                    </return-response>
                </otherwise>
            </choose>
        </retry>
        <set-header name="Backend-Service-URL" exists-action="override">
            <value>@((string)context.Variables["backendUrl"])</value>
        </set-header>
        <cache-store duration="20" />
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
<!--
    This block is preserved as an example of selecting "not any of these named models"

    <when condition="@(context.Variables.GetValueOrDefault<string>("aoaiModelName") != "gpt-4" || context.Variables.GetValueOrDefault<string>("aoaiModelName") != "gpt-4-32k" || context.Variables.GetValueOrDefault<string>("aoaiModelName") != "text-davinci-003"))">
                <set-variable name="urlId" value="@(new Random(context.RequestId.GetHashCode()).Next(1, 2))">
                    <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 1)">
                        <set-variable name="backendUrl" value="{{aoai-endpoint}}" />
                        <set-header name="api-key" exists-action="override">
                            <value>{{aoai-endpoint-key}}</value>
                        </set-header>
            </when>


    Matching retry condition below

        <retry condition="@(context.Response.StatusCode == 429 && (context.Variables.GetValueOrDefault<string>("aoaiModelName") != "gpt-4" || context.Variables.GetValueOrDefault<string>("aoaiModelName") != "gpt-4-32k" || context.Variables.GetValueOrDefault<string>("aoaiModelName") != "text-davinci-003"))" count="50" interval="1" delta="1" max-interval="20" first-fast-retry="true">
            <choose>
                <when condition="@(context.Variables.GetValueOrDefault<int>("urlId") == 1)">
                        <set-variable name="backendUrl" value="{{aoai-endpoint}}" />
                        <set-header name="api-key" exists-action="override">
                            <value>{{aoai-endpoint-key}}</value>
                        </set-header>
-->